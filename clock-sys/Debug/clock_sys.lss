
clock_sys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000008cc  00000960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  00000976  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001122  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c5  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c6e  00000000  00000000  000024bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000312c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000490  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e5  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003e81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1d 03 	call	0x63a	; 0x63a <main>
  8a:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INT0_init>:
 * Created: 2/13/2023 8:05:24 PM
 *  Author: Ve-ga
 */ 
#include "External_Interrupts.h"
void INT0_init(void){
	GICR = 1<<INT0;		/* Enable INT0*/
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	85 bf       	out	0x35, r24	; 53
	SETBIT(SREG, 7);
  9a:	8f b7       	in	r24, 0x3f	; 63
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8f bf       	out	0x3f, r24	; 63
  a0:	08 95       	ret

000000a2 <LCD_write_char>:
	LCD_write_command(0x0c);
	_delay_ms(20);
	
}
void LCD_write_char(uint8_t data){
	LCD_RS(1);
  a2:	95 b3       	in	r25, 0x15	; 21
  a4:	94 60       	ori	r25, 0x04	; 4
  a6:	95 bb       	out	0x15, r25	; 21
	LCD_D7(READBIT(data,7));
  a8:	88 23       	and	r24, r24
  aa:	24 f4       	brge	.+8      	; 0xb4 <LCD_write_char+0x12>
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	90 68       	ori	r25, 0x80	; 128
  b0:	95 bb       	out	0x15, r25	; 21
  b2:	03 c0       	rjmp	.+6      	; 0xba <LCD_write_char+0x18>
  b4:	95 b3       	in	r25, 0x15	; 21
  b6:	9f 77       	andi	r25, 0x7F	; 127
  b8:	95 bb       	out	0x15, r25	; 21
	LCD_D6(READBIT(data,6));
  ba:	86 ff       	sbrs	r24, 6
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <LCD_write_char+0x24>
  be:	95 b3       	in	r25, 0x15	; 21
  c0:	90 64       	ori	r25, 0x40	; 64
  c2:	95 bb       	out	0x15, r25	; 21
  c4:	03 c0       	rjmp	.+6      	; 0xcc <LCD_write_char+0x2a>
  c6:	95 b3       	in	r25, 0x15	; 21
  c8:	9f 7b       	andi	r25, 0xBF	; 191
  ca:	95 bb       	out	0x15, r25	; 21
	LCD_D5(READBIT(data,5));
  cc:	85 ff       	sbrs	r24, 5
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <LCD_write_char+0x36>
  d0:	95 b3       	in	r25, 0x15	; 21
  d2:	90 62       	ori	r25, 0x20	; 32
  d4:	95 bb       	out	0x15, r25	; 21
  d6:	03 c0       	rjmp	.+6      	; 0xde <LCD_write_char+0x3c>
  d8:	95 b3       	in	r25, 0x15	; 21
  da:	9f 7d       	andi	r25, 0xDF	; 223
  dc:	95 bb       	out	0x15, r25	; 21
	LCD_D4(READBIT(data,4));
  de:	84 ff       	sbrs	r24, 4
  e0:	04 c0       	rjmp	.+8      	; 0xea <LCD_write_char+0x48>
  e2:	95 b3       	in	r25, 0x15	; 21
  e4:	90 61       	ori	r25, 0x10	; 16
  e6:	95 bb       	out	0x15, r25	; 21
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <LCD_write_char+0x4e>
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	9f 7e       	andi	r25, 0xEF	; 239
  ee:	95 bb       	out	0x15, r25	; 21
	LCD_EN(1);
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	98 60       	ori	r25, 0x08	; 8
  f4:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	ef e9       	ldi	r30, 0x9F	; 159
  f8:	ff e0       	ldi	r31, 0x0F	; 15
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_write_char+0x58>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_write_char+0x5e>
 100:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 102:	95 b3       	in	r25, 0x15	; 21
 104:	97 7f       	andi	r25, 0xF7	; 247
 106:	95 bb       	out	0x15, r25	; 21
 108:	ef e9       	ldi	r30, 0x9F	; 159
 10a:	ff e0       	ldi	r31, 0x0F	; 15
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_write_char+0x6a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_write_char+0x70>
 112:	00 00       	nop
	_delay_ms(1);
	
	LCD_D7(READBIT(data,3));
 114:	83 ff       	sbrs	r24, 3
 116:	04 c0       	rjmp	.+8      	; 0x120 <LCD_write_char+0x7e>
 118:	95 b3       	in	r25, 0x15	; 21
 11a:	90 68       	ori	r25, 0x80	; 128
 11c:	95 bb       	out	0x15, r25	; 21
 11e:	03 c0       	rjmp	.+6      	; 0x126 <LCD_write_char+0x84>
 120:	95 b3       	in	r25, 0x15	; 21
 122:	9f 77       	andi	r25, 0x7F	; 127
 124:	95 bb       	out	0x15, r25	; 21
	LCD_D6(READBIT(data,2));
 126:	82 ff       	sbrs	r24, 2
 128:	04 c0       	rjmp	.+8      	; 0x132 <LCD_write_char+0x90>
 12a:	95 b3       	in	r25, 0x15	; 21
 12c:	90 64       	ori	r25, 0x40	; 64
 12e:	95 bb       	out	0x15, r25	; 21
 130:	03 c0       	rjmp	.+6      	; 0x138 <LCD_write_char+0x96>
 132:	95 b3       	in	r25, 0x15	; 21
 134:	9f 7b       	andi	r25, 0xBF	; 191
 136:	95 bb       	out	0x15, r25	; 21
	LCD_D5(READBIT(data,1));
 138:	81 ff       	sbrs	r24, 1
 13a:	04 c0       	rjmp	.+8      	; 0x144 <LCD_write_char+0xa2>
 13c:	95 b3       	in	r25, 0x15	; 21
 13e:	90 62       	ori	r25, 0x20	; 32
 140:	95 bb       	out	0x15, r25	; 21
 142:	03 c0       	rjmp	.+6      	; 0x14a <LCD_write_char+0xa8>
 144:	95 b3       	in	r25, 0x15	; 21
 146:	9f 7d       	andi	r25, 0xDF	; 223
 148:	95 bb       	out	0x15, r25	; 21
	LCD_D4(READBIT(data,0));
 14a:	80 ff       	sbrs	r24, 0
 14c:	04 c0       	rjmp	.+8      	; 0x156 <LCD_write_char+0xb4>
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	80 61       	ori	r24, 0x10	; 16
 152:	85 bb       	out	0x15, r24	; 21
 154:	03 c0       	rjmp	.+6      	; 0x15c <LCD_write_char+0xba>
 156:	85 b3       	in	r24, 0x15	; 21
 158:	8f 7e       	andi	r24, 0xEF	; 239
 15a:	85 bb       	out	0x15, r24	; 21
	LCD_EN(1);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	85 bb       	out	0x15, r24	; 21
 162:	8f e9       	ldi	r24, 0x9F	; 159
 164:	9f e0       	ldi	r25, 0x0F	; 15
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_write_char+0xc4>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_write_char+0xca>
 16c:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 16e:	85 b3       	in	r24, 0x15	; 21
 170:	87 7f       	andi	r24, 0xF7	; 247
 172:	85 bb       	out	0x15, r24	; 21
 174:	ef e9       	ldi	r30, 0x9F	; 159
 176:	ff e0       	ldi	r31, 0x0F	; 15
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_write_char+0xd6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_write_char+0xdc>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <LCD_write_string>:
	_delay_ms(1);

}
void LCD_write_string(uint8_t *txt){
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
	while(*txt){
 188:	03 c0       	rjmp	.+6      	; 0x190 <LCD_write_string+0xe>
		LCD_write_char(*txt);
 18a:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
		txt++;
 18e:	21 96       	adiw	r28, 0x01	; 1
	LCD_EN(0);
	_delay_ms(1);

}
void LCD_write_string(uint8_t *txt){
	while(*txt){
 190:	88 81       	ld	r24, Y
 192:	81 11       	cpse	r24, r1
 194:	fa cf       	rjmp	.-12     	; 0x18a <LCD_write_string+0x8>
		LCD_write_char(*txt);
		txt++;
	}
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <LCD_write_command>:
void LCD_write_command(uint8_t cmd){
	LCD_RS(0);
 19c:	95 b3       	in	r25, 0x15	; 21
 19e:	9b 7f       	andi	r25, 0xFB	; 251
 1a0:	95 bb       	out	0x15, r25	; 21
	LCD_D7(READBIT(cmd,7));
 1a2:	88 23       	and	r24, r24
 1a4:	24 f4       	brge	.+8      	; 0x1ae <LCD_write_command+0x12>
 1a6:	95 b3       	in	r25, 0x15	; 21
 1a8:	90 68       	ori	r25, 0x80	; 128
 1aa:	95 bb       	out	0x15, r25	; 21
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <LCD_write_command+0x18>
 1ae:	95 b3       	in	r25, 0x15	; 21
 1b0:	9f 77       	andi	r25, 0x7F	; 127
 1b2:	95 bb       	out	0x15, r25	; 21
	LCD_D6(READBIT(cmd,6));
 1b4:	86 ff       	sbrs	r24, 6
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <LCD_write_command+0x24>
 1b8:	95 b3       	in	r25, 0x15	; 21
 1ba:	90 64       	ori	r25, 0x40	; 64
 1bc:	95 bb       	out	0x15, r25	; 21
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <LCD_write_command+0x2a>
 1c0:	95 b3       	in	r25, 0x15	; 21
 1c2:	9f 7b       	andi	r25, 0xBF	; 191
 1c4:	95 bb       	out	0x15, r25	; 21
	LCD_D5(READBIT(cmd,5));
 1c6:	85 ff       	sbrs	r24, 5
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <LCD_write_command+0x36>
 1ca:	95 b3       	in	r25, 0x15	; 21
 1cc:	90 62       	ori	r25, 0x20	; 32
 1ce:	95 bb       	out	0x15, r25	; 21
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <LCD_write_command+0x3c>
 1d2:	95 b3       	in	r25, 0x15	; 21
 1d4:	9f 7d       	andi	r25, 0xDF	; 223
 1d6:	95 bb       	out	0x15, r25	; 21
	LCD_D4(READBIT(cmd,4));
 1d8:	84 ff       	sbrs	r24, 4
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <LCD_write_command+0x48>
 1dc:	95 b3       	in	r25, 0x15	; 21
 1de:	90 61       	ori	r25, 0x10	; 16
 1e0:	95 bb       	out	0x15, r25	; 21
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <LCD_write_command+0x4e>
 1e4:	95 b3       	in	r25, 0x15	; 21
 1e6:	9f 7e       	andi	r25, 0xEF	; 239
 1e8:	95 bb       	out	0x15, r25	; 21
	LCD_EN(1);
 1ea:	95 b3       	in	r25, 0x15	; 21
 1ec:	98 60       	ori	r25, 0x08	; 8
 1ee:	95 bb       	out	0x15, r25	; 21
 1f0:	ef e9       	ldi	r30, 0x9F	; 159
 1f2:	ff e0       	ldi	r31, 0x0F	; 15
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_write_command+0x58>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_write_command+0x5e>
 1fa:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 1fc:	95 b3       	in	r25, 0x15	; 21
 1fe:	97 7f       	andi	r25, 0xF7	; 247
 200:	95 bb       	out	0x15, r25	; 21
 202:	ef e9       	ldi	r30, 0x9F	; 159
 204:	ff e0       	ldi	r31, 0x0F	; 15
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_write_command+0x6a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_write_command+0x70>
 20c:	00 00       	nop
	_delay_ms(1);
	
	LCD_D7(READBIT(cmd,3));
 20e:	83 ff       	sbrs	r24, 3
 210:	04 c0       	rjmp	.+8      	; 0x21a <LCD_write_command+0x7e>
 212:	95 b3       	in	r25, 0x15	; 21
 214:	90 68       	ori	r25, 0x80	; 128
 216:	95 bb       	out	0x15, r25	; 21
 218:	03 c0       	rjmp	.+6      	; 0x220 <LCD_write_command+0x84>
 21a:	95 b3       	in	r25, 0x15	; 21
 21c:	9f 77       	andi	r25, 0x7F	; 127
 21e:	95 bb       	out	0x15, r25	; 21
	LCD_D6(READBIT(cmd,2));
 220:	82 ff       	sbrs	r24, 2
 222:	04 c0       	rjmp	.+8      	; 0x22c <LCD_write_command+0x90>
 224:	95 b3       	in	r25, 0x15	; 21
 226:	90 64       	ori	r25, 0x40	; 64
 228:	95 bb       	out	0x15, r25	; 21
 22a:	03 c0       	rjmp	.+6      	; 0x232 <LCD_write_command+0x96>
 22c:	95 b3       	in	r25, 0x15	; 21
 22e:	9f 7b       	andi	r25, 0xBF	; 191
 230:	95 bb       	out	0x15, r25	; 21
	LCD_D5(READBIT(cmd,1));
 232:	81 ff       	sbrs	r24, 1
 234:	04 c0       	rjmp	.+8      	; 0x23e <LCD_write_command+0xa2>
 236:	95 b3       	in	r25, 0x15	; 21
 238:	90 62       	ori	r25, 0x20	; 32
 23a:	95 bb       	out	0x15, r25	; 21
 23c:	03 c0       	rjmp	.+6      	; 0x244 <LCD_write_command+0xa8>
 23e:	95 b3       	in	r25, 0x15	; 21
 240:	9f 7d       	andi	r25, 0xDF	; 223
 242:	95 bb       	out	0x15, r25	; 21
	LCD_D4(READBIT(cmd,0));
 244:	80 ff       	sbrs	r24, 0
 246:	04 c0       	rjmp	.+8      	; 0x250 <LCD_write_command+0xb4>
 248:	85 b3       	in	r24, 0x15	; 21
 24a:	80 61       	ori	r24, 0x10	; 16
 24c:	85 bb       	out	0x15, r24	; 21
 24e:	03 c0       	rjmp	.+6      	; 0x256 <LCD_write_command+0xba>
 250:	85 b3       	in	r24, 0x15	; 21
 252:	8f 7e       	andi	r24, 0xEF	; 239
 254:	85 bb       	out	0x15, r24	; 21
	LCD_EN(1);
 256:	85 b3       	in	r24, 0x15	; 21
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	85 bb       	out	0x15, r24	; 21
 25c:	8f e9       	ldi	r24, 0x9F	; 159
 25e:	9f e0       	ldi	r25, 0x0F	; 15
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_write_command+0xc4>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_write_command+0xca>
 266:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 268:	85 b3       	in	r24, 0x15	; 21
 26a:	87 7f       	andi	r24, 0xF7	; 247
 26c:	85 bb       	out	0x15, r24	; 21
 26e:	ef e9       	ldi	r30, 0x9F	; 159
 270:	ff e0       	ldi	r31, 0x0F	; 15
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_write_command+0xd6>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_write_command+0xdc>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <LCD_init>:
 */ 
#include "lcd.h"
#include "lcd_cfg.h"

void LCD_init(void){
	INIT_LCD_PINS();
 27c:	84 b3       	in	r24, 0x14	; 20
 27e:	8c 6f       	ori	r24, 0xFC	; 252
 280:	84 bb       	out	0x14, r24	; 20
	LCD_write_command(0x3);
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
 288:	8f e7       	ldi	r24, 0x7F	; 127
 28a:	9e e3       	ldi	r25, 0x3E	; 62
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_init+0x10>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_init+0x16>
 292:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
 29a:	8f e7       	ldi	r24, 0x7F	; 127
 29c:	9e e3       	ldi	r25, 0x3E	; 62
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_init+0x22>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_init+0x28>
 2a4:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
	LCD_write_command(0x2);
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
	LCD_write_command(0x28);
 2b2:	88 e2       	ldi	r24, 0x28	; 40
 2b4:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
	LCD_write_command(0x1);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
	LCD_write_command(0x06);
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
	LCD_write_command(0x0c);
 2c4:	8c e0       	ldi	r24, 0x0C	; 12
 2c6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	29 ef       	ldi	r18, 0xF9	; 249
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	91 50       	subi	r25, 0x01	; 1
 2d2:	20 40       	sbci	r18, 0x00	; 0
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <LCD_init+0x54>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_init+0x5e>
 2da:	00 00       	nop
 2dc:	08 95       	ret

000002de <__vector_11>:
			
		}					
    }
	
}
ISR(TIMER0_OVF_vect){
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	static uint16_t count = 0 ;
	static uint8_t h = 0, m = 0, s = 0;
	if(clock_on == 1){
 300:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <clock_on>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	49 f4       	brne	.+18     	; 0x31a <__vector_11+0x3c>
		count ++;
 308:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <count.1768>
 30c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count.1768+0x1>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <count.1768+0x1>
 316:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <count.1768>
	}
	if(count == 976){ // 16 * 64 * ? = 1000000       => 1sec
 31a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <count.1768>
 31e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <count.1768+0x1>
 322:	80 3d       	cpi	r24, 0xD0	; 208
 324:	93 40       	sbci	r25, 0x03	; 3
 326:	49 f4       	brne	.+18     	; 0x33a <__vector_11+0x5c>
		second ++;
 328:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <second>
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <second>
		count = 0;
 332:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <count.1768+0x1>
 336:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <count.1768>
	}
	switch (h){
 33a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	81 f1       	breq	.+96     	; 0x3a2 <__vector_11+0xc4>
 342:	28 f4       	brcc	.+10     	; 0x34e <__vector_11+0x70>
 344:	88 23       	and	r24, r24
 346:	59 f0       	breq	.+22     	; 0x35e <__vector_11+0x80>
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	b9 f0       	breq	.+46     	; 0x37a <__vector_11+0x9c>
 34c:	6d c0       	rjmp	.+218    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 34e:	84 30       	cpi	r24, 0x04	; 4
 350:	09 f4       	brne	.+2      	; 0x354 <__vector_11+0x76>
 352:	49 c0       	rjmp	.+146    	; 0x3e6 <__vector_11+0x108>
 354:	a0 f1       	brcs	.+104    	; 0x3be <__vector_11+0xe0>
 356:	85 30       	cpi	r24, 0x05	; 5
 358:	09 f4       	brne	.+2      	; 0x35c <__vector_11+0x7e>
 35a:	53 c0       	rjmp	.+166    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 35c:	65 c0       	rjmp	.+202    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		case 0:	seven_seg_write(hour / 10, 1);	break;
 35e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <hour>
 362:	87 e6       	ldi	r24, 0x67	; 103
 364:	98 02       	muls	r25, r24
 366:	81 2d       	mov	r24, r1
 368:	11 24       	eor	r1, r1
 36a:	85 95       	asr	r24
 36c:	85 95       	asr	r24
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	97 fd       	sbrc	r25, 7
 372:	83 95       	inc	r24
 374:	0e 94 18 04 	call	0x830	; 0x830 <seven_seg_write>
 378:	57 c0       	rjmp	.+174    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		case 1:	seven_seg_write(hour % 10, 2);	break;
 37a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <hour>
 37e:	97 e6       	ldi	r25, 0x67	; 103
 380:	89 02       	muls	r24, r25
 382:	91 2d       	mov	r25, r1
 384:	11 24       	eor	r1, r1
 386:	95 95       	asr	r25
 388:	95 95       	asr	r25
 38a:	87 fd       	sbrc	r24, 7
 38c:	93 95       	inc	r25
 38e:	99 0f       	add	r25, r25
 390:	29 2f       	mov	r18, r25
 392:	22 0f       	add	r18, r18
 394:	22 0f       	add	r18, r18
 396:	92 0f       	add	r25, r18
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	89 1b       	sub	r24, r25
 39c:	0e 94 18 04 	call	0x830	; 0x830 <seven_seg_write>
 3a0:	43 c0       	rjmp	.+134    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		case 2: seven_seg_write(minut / 10, 3);	break;
 3a2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <minut>
 3a6:	87 e6       	ldi	r24, 0x67	; 103
 3a8:	98 02       	muls	r25, r24
 3aa:	81 2d       	mov	r24, r1
 3ac:	11 24       	eor	r1, r1
 3ae:	85 95       	asr	r24
 3b0:	85 95       	asr	r24
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	97 fd       	sbrc	r25, 7
 3b6:	83 95       	inc	r24
 3b8:	0e 94 18 04 	call	0x830	; 0x830 <seven_seg_write>
 3bc:	35 c0       	rjmp	.+106    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		case 3:	seven_seg_write(minut % 10, 4);	break;
 3be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <minut>
 3c2:	97 e6       	ldi	r25, 0x67	; 103
 3c4:	89 02       	muls	r24, r25
 3c6:	91 2d       	mov	r25, r1
 3c8:	11 24       	eor	r1, r1
 3ca:	95 95       	asr	r25
 3cc:	95 95       	asr	r25
 3ce:	87 fd       	sbrc	r24, 7
 3d0:	93 95       	inc	r25
 3d2:	99 0f       	add	r25, r25
 3d4:	29 2f       	mov	r18, r25
 3d6:	22 0f       	add	r18, r18
 3d8:	22 0f       	add	r18, r18
 3da:	92 0f       	add	r25, r18
 3dc:	64 e0       	ldi	r22, 0x04	; 4
 3de:	89 1b       	sub	r24, r25
 3e0:	0e 94 18 04 	call	0x830	; 0x830 <seven_seg_write>
 3e4:	21 c0       	rjmp	.+66     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		case 4:	seven_seg_write(second / 10 ,5);break;
 3e6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <second>
 3ea:	87 e6       	ldi	r24, 0x67	; 103
 3ec:	98 02       	muls	r25, r24
 3ee:	81 2d       	mov	r24, r1
 3f0:	11 24       	eor	r1, r1
 3f2:	85 95       	asr	r24
 3f4:	85 95       	asr	r24
 3f6:	65 e0       	ldi	r22, 0x05	; 5
 3f8:	97 fd       	sbrc	r25, 7
 3fa:	83 95       	inc	r24
 3fc:	0e 94 18 04 	call	0x830	; 0x830 <seven_seg_write>
 400:	13 c0       	rjmp	.+38     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		case 5:	seven_seg_write(second % 10, 6);break;
 402:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <second>
 406:	97 e6       	ldi	r25, 0x67	; 103
 408:	89 02       	muls	r24, r25
 40a:	91 2d       	mov	r25, r1
 40c:	11 24       	eor	r1, r1
 40e:	95 95       	asr	r25
 410:	95 95       	asr	r25
 412:	87 fd       	sbrc	r24, 7
 414:	93 95       	inc	r25
 416:	99 0f       	add	r25, r25
 418:	29 2f       	mov	r18, r25
 41a:	22 0f       	add	r18, r18
 41c:	22 0f       	add	r18, r18
 41e:	92 0f       	add	r25, r18
 420:	66 e0       	ldi	r22, 0x06	; 6
 422:	89 1b       	sub	r24, r25
 424:	0e 94 18 04 	call	0x830	; 0x830 <seven_seg_write>
	}
	h++;
 428:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	if( h == 6){
 432:	86 30       	cpi	r24, 0x06	; 6
 434:	11 f4       	brne	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		h = 0;
 436:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
	}
	
}
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <__vector_1>:
ISR(INT0_vect){
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	8f 93       	push	r24
	if(count_press == 0){
 468:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 46c:	81 11       	cpse	r24, r1
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__vector_1+0x18>
		clock_on = 0;
 470:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <clock_on>
	}
	count_press ++;
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

	
}
 47a:	8f 91       	pop	r24
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <clock_control>:
void clock_control(){
 486:	cf 93       	push	r28
	
	while(1){
		if(count_press == 1){
 488:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	09 f0       	breq	.+2      	; 0x492 <clock_control+0xc>
 490:	42 c0       	rjmp	.+132    	; 0x516 <clock_control+0x90>
			if(READBIT(PIND, 0) == 1){
 492:	80 9b       	sbis	0x10, 0	; 16
 494:	0c c0       	rjmp	.+24     	; 0x4ae <clock_control+0x28>
				while(READBIT(PIND, 0) == 1);
 496:	80 99       	sbic	0x10, 0	; 16
 498:	fe cf       	rjmp	.-4      	; 0x496 <clock_control+0x10>
				hour ++;
 49a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <hour>
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <hour>
				if(hour >= 24){
 4a4:	88 31       	cpi	r24, 0x18	; 24
 4a6:	8c f0       	brlt	.+34     	; 0x4ca <clock_control+0x44>
					hour = 0;
 4a8:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <hour>
 4ac:	0e c0       	rjmp	.+28     	; 0x4ca <clock_control+0x44>
				}
			}
			else if(READBIT(PIND, 1) == 1){
 4ae:	81 9b       	sbis	0x10, 1	; 16
 4b0:	0c c0       	rjmp	.+24     	; 0x4ca <clock_control+0x44>
				while(READBIT(PIND, 1) == 1);
 4b2:	81 99       	sbic	0x10, 1	; 16
 4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <clock_control+0x2c>
				hour --;
 4b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <hour>
 4ba:	81 50       	subi	r24, 0x01	; 1
 4bc:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <hour>
				if(hour < 0){
 4c0:	88 23       	and	r24, r24
 4c2:	1c f4       	brge	.+6      	; 0x4ca <clock_control+0x44>
					hour = 23;
 4c4:	87 e1       	ldi	r24, 0x17	; 23
 4c6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <hour>
				}
			}
			LCD_write_command(0x80);
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(hour / 10 + '0');
 4d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <hour>
 4d4:	c7 e6       	ldi	r28, 0x67	; 103
 4d6:	9c 02       	muls	r25, r28
 4d8:	81 2d       	mov	r24, r1
 4da:	11 24       	eor	r1, r1
 4dc:	85 95       	asr	r24
 4de:	85 95       	asr	r24
 4e0:	97 fd       	sbrc	r25, 7
 4e2:	83 95       	inc	r24
 4e4:	80 5d       	subi	r24, 0xD0	; 208
 4e6:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
			LCD_write_command(0x81);
 4ea:	81 e8       	ldi	r24, 0x81	; 129
 4ec:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(hour % 10 + '0');
 4f0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <hour>
 4f4:	8c 02       	muls	r24, r28
 4f6:	c1 2d       	mov	r28, r1
 4f8:	11 24       	eor	r1, r1
 4fa:	c5 95       	asr	r28
 4fc:	c5 95       	asr	r28
 4fe:	87 fd       	sbrc	r24, 7
 500:	c3 95       	inc	r28
 502:	cc 0f       	add	r28, r28
 504:	9c 2f       	mov	r25, r28
 506:	99 0f       	add	r25, r25
 508:	99 0f       	add	r25, r25
 50a:	c9 0f       	add	r28, r25
 50c:	8c 1b       	sub	r24, r28
 50e:	80 5d       	subi	r24, 0xD0	; 208
 510:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
 514:	86 c0       	rjmp	.+268    	; 0x622 <clock_control+0x19c>
		}
		else if(count_press == 2){
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	09 f0       	breq	.+2      	; 0x51c <clock_control+0x96>
 51a:	42 c0       	rjmp	.+132    	; 0x5a0 <clock_control+0x11a>
			if(READBIT(PIND, 0) == 1){
 51c:	80 9b       	sbis	0x10, 0	; 16
 51e:	0c c0       	rjmp	.+24     	; 0x538 <clock_control+0xb2>
				while(READBIT(PIND, 0) == 1);
 520:	80 99       	sbic	0x10, 0	; 16
 522:	fe cf       	rjmp	.-4      	; 0x520 <clock_control+0x9a>
				minut ++;
 524:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <minut>
 528:	8f 5f       	subi	r24, 0xFF	; 255
 52a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <minut>
				if(minut >= 60){
 52e:	8c 33       	cpi	r24, 0x3C	; 60
 530:	8c f0       	brlt	.+34     	; 0x554 <clock_control+0xce>
					minut = 0;
 532:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <minut>
 536:	0e c0       	rjmp	.+28     	; 0x554 <clock_control+0xce>
				}
			}
			else if(READBIT(PIND, 1) == 1){
 538:	81 9b       	sbis	0x10, 1	; 16
 53a:	0c c0       	rjmp	.+24     	; 0x554 <clock_control+0xce>
				while(READBIT(PIND, 1) == 1);
 53c:	81 99       	sbic	0x10, 1	; 16
 53e:	fe cf       	rjmp	.-4      	; 0x53c <clock_control+0xb6>
				minut --;
 540:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <minut>
 544:	81 50       	subi	r24, 0x01	; 1
 546:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <minut>
				if(minut < 0){
 54a:	88 23       	and	r24, r24
 54c:	1c f4       	brge	.+6      	; 0x554 <clock_control+0xce>
					minut = 59;
 54e:	8b e3       	ldi	r24, 0x3B	; 59
 550:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <minut>
				}
			}
			LCD_write_command(0x83); 
 554:	83 e8       	ldi	r24, 0x83	; 131
 556:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(minut / 10 + '0');
 55a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <minut>
 55e:	c7 e6       	ldi	r28, 0x67	; 103
 560:	9c 02       	muls	r25, r28
 562:	81 2d       	mov	r24, r1
 564:	11 24       	eor	r1, r1
 566:	85 95       	asr	r24
 568:	85 95       	asr	r24
 56a:	97 fd       	sbrc	r25, 7
 56c:	83 95       	inc	r24
 56e:	80 5d       	subi	r24, 0xD0	; 208
 570:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
			LCD_write_command(0x84);
 574:	84 e8       	ldi	r24, 0x84	; 132
 576:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(minut % 10 + '0');
 57a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <minut>
 57e:	8c 02       	muls	r24, r28
 580:	c1 2d       	mov	r28, r1
 582:	11 24       	eor	r1, r1
 584:	c5 95       	asr	r28
 586:	c5 95       	asr	r28
 588:	87 fd       	sbrc	r24, 7
 58a:	c3 95       	inc	r28
 58c:	cc 0f       	add	r28, r28
 58e:	9c 2f       	mov	r25, r28
 590:	99 0f       	add	r25, r25
 592:	99 0f       	add	r25, r25
 594:	c9 0f       	add	r28, r25
 596:	8c 1b       	sub	r24, r28
 598:	80 5d       	subi	r24, 0xD0	; 208
 59a:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
 59e:	41 c0       	rjmp	.+130    	; 0x622 <clock_control+0x19c>
		}
		else{
			if(READBIT(PIND, 0) == 1){
 5a0:	80 9b       	sbis	0x10, 0	; 16
 5a2:	0c c0       	rjmp	.+24     	; 0x5bc <clock_control+0x136>
				while(READBIT(PIND, 0) == 1);
 5a4:	80 99       	sbic	0x10, 0	; 16
 5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <clock_control+0x11e>
				second ++;
 5a8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <second>
 5ac:	8f 5f       	subi	r24, 0xFF	; 255
 5ae:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <second>
				if(second >= 60){
 5b2:	8c 33       	cpi	r24, 0x3C	; 60
 5b4:	8c f0       	brlt	.+34     	; 0x5d8 <clock_control+0x152>
					second = 0;
 5b6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <second>
 5ba:	0e c0       	rjmp	.+28     	; 0x5d8 <clock_control+0x152>
				}
			}
			else if(READBIT(PIND, 1) == 1){
 5bc:	81 9b       	sbis	0x10, 1	; 16
 5be:	0c c0       	rjmp	.+24     	; 0x5d8 <clock_control+0x152>
				while(READBIT(PIND, 1) == 1);
 5c0:	81 99       	sbic	0x10, 1	; 16
 5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <clock_control+0x13a>
				second --;
 5c4:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <second>
 5c8:	81 50       	subi	r24, 0x01	; 1
 5ca:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <second>
				if(second < 0){
 5ce:	88 23       	and	r24, r24
 5d0:	1c f4       	brge	.+6      	; 0x5d8 <clock_control+0x152>
					second = 59;
 5d2:	8b e3       	ldi	r24, 0x3B	; 59
 5d4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <second>
				}
			}
			LCD_write_command(0x86); 
 5d8:	86 e8       	ldi	r24, 0x86	; 134
 5da:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(second / 10 + '0');
 5de:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <second>
 5e2:	c7 e6       	ldi	r28, 0x67	; 103
 5e4:	9c 02       	muls	r25, r28
 5e6:	81 2d       	mov	r24, r1
 5e8:	11 24       	eor	r1, r1
 5ea:	85 95       	asr	r24
 5ec:	85 95       	asr	r24
 5ee:	97 fd       	sbrc	r25, 7
 5f0:	83 95       	inc	r24
 5f2:	80 5d       	subi	r24, 0xD0	; 208
 5f4:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
			LCD_write_command(0x87);
 5f8:	87 e8       	ldi	r24, 0x87	; 135
 5fa:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(second % 10 + '0');
 5fe:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <second>
 602:	8c 02       	muls	r24, r28
 604:	c1 2d       	mov	r28, r1
 606:	11 24       	eor	r1, r1
 608:	c5 95       	asr	r28
 60a:	c5 95       	asr	r28
 60c:	87 fd       	sbrc	r24, 7
 60e:	c3 95       	inc	r28
 610:	cc 0f       	add	r28, r28
 612:	9c 2f       	mov	r25, r28
 614:	99 0f       	add	r25, r25
 616:	99 0f       	add	r25, r25
 618:	c9 0f       	add	r28, r25
 61a:	8c 1b       	sub	r24, r28
 61c:	80 5d       	subi	r24, 0xD0	; 208
 61e:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
		}
		if( count_press > 3){
 622:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 626:	84 30       	cpi	r24, 0x04	; 4
 628:	0c f4       	brge	.+2      	; 0x62c <clock_control+0x1a6>
 62a:	2e cf       	rjmp	.-420    	; 0x488 <clock_control+0x2>
			count_press = 0;
 62c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			clock_on = 1;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <clock_on>
			return;
		}
	}
}
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <main>:

void clock_control();

int main(void)
{
	LCD_init();
 63a:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_init>
    seven_seg_init();
 63e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <seven_seg_init>
	Timer0_normal_init();
 642:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Timer0_normal_init>
	SETBIT(DDRD, 2);
 646:	81 b3       	in	r24, 0x11	; 17
 648:	84 60       	ori	r24, 0x04	; 4
 64a:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD, 1);
 64c:	81 b3       	in	r24, 0x11	; 17
 64e:	82 60       	ori	r24, 0x02	; 2
 650:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD, 0);	
 652:	81 b3       	in	r24, 0x11	; 17
 654:	81 60       	ori	r24, 0x01	; 1
 656:	81 bb       	out	0x11, r24	; 17
	INT0_init();
 658:	0e 94 49 00 	call	0x92	; 0x92 <INT0_init>
	LCD_write_command(0x82);
 65c:	82 e8       	ldi	r24, 0x82	; 130
 65e:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
	LCD_write_char(':');
 662:	8a e3       	ldi	r24, 0x3A	; 58
 664:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
	LCD_write_command(0x85);
 668:	85 e8       	ldi	r24, 0x85	; 133
 66a:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
	LCD_write_char(':');
 66e:	8a e3       	ldi	r24, 0x3A	; 58
 670:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
	
    while (1) 
    {	
		if(second == 60){
 674:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <second>
 678:	8c 33       	cpi	r24, 0x3C	; 60
 67a:	a1 f4       	brne	.+40     	; 0x6a4 <main+0x6a>
			second = 0;
 67c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <second>
			minut ++;
 680:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <minut>
 684:	8f 5f       	subi	r24, 0xFF	; 255
 686:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <minut>
			
			if(minut == 60){
 68a:	8c 33       	cpi	r24, 0x3C	; 60
 68c:	59 f4       	brne	.+22     	; 0x6a4 <main+0x6a>
				minut = 0;
 68e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <minut>
				hour ++;
 692:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <hour>
 696:	8f 5f       	subi	r24, 0xFF	; 255
 698:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <hour>
				
				if(hour == 24){
 69c:	88 31       	cpi	r24, 0x18	; 24
 69e:	11 f4       	brne	.+4      	; 0x6a4 <main+0x6a>
					hour = 0;
 6a0:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <hour>
				}
			}
		}
		LCD_write_command(0x86);
 6a4:	86 e8       	ldi	r24, 0x86	; 134
 6a6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
		LCD_write_char(second / 10 + '0');
 6aa:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <second>
 6ae:	c7 e6       	ldi	r28, 0x67	; 103
 6b0:	9c 02       	muls	r25, r28
 6b2:	81 2d       	mov	r24, r1
 6b4:	11 24       	eor	r1, r1
 6b6:	85 95       	asr	r24
 6b8:	85 95       	asr	r24
 6ba:	97 fd       	sbrc	r25, 7
 6bc:	83 95       	inc	r24
 6be:	80 5d       	subi	r24, 0xD0	; 208
 6c0:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
		LCD_write_command(0x87);
 6c4:	87 e8       	ldi	r24, 0x87	; 135
 6c6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
		LCD_write_char(second % 10 + '0');
 6ca:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <second>
 6ce:	8c 02       	muls	r24, r28
 6d0:	c1 2d       	mov	r28, r1
 6d2:	11 24       	eor	r1, r1
 6d4:	c5 95       	asr	r28
 6d6:	c5 95       	asr	r28
 6d8:	87 fd       	sbrc	r24, 7
 6da:	c3 95       	inc	r28
 6dc:	cc 0f       	add	r28, r28
 6de:	9c 2f       	mov	r25, r28
 6e0:	99 0f       	add	r25, r25
 6e2:	99 0f       	add	r25, r25
 6e4:	c9 0f       	add	r28, r25
 6e6:	8c 1b       	sub	r24, r28
 6e8:	80 5d       	subi	r24, 0xD0	; 208
 6ea:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
		
		if( lst_minut != minut){
 6ee:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <lst_minut>
 6f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <minut>
 6f6:	98 17       	cp	r25, r24
 6f8:	49 f1       	breq	.+82     	; 0x74c <main+0x112>
			LCD_write_command(0x83); 
 6fa:	83 e8       	ldi	r24, 0x83	; 131
 6fc:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(minut / 10 + '0');
 700:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <minut>
 704:	c7 e6       	ldi	r28, 0x67	; 103
 706:	9c 02       	muls	r25, r28
 708:	81 2d       	mov	r24, r1
 70a:	11 24       	eor	r1, r1
 70c:	85 95       	asr	r24
 70e:	85 95       	asr	r24
 710:	97 fd       	sbrc	r25, 7
 712:	83 95       	inc	r24
 714:	80 5d       	subi	r24, 0xD0	; 208
 716:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
			LCD_write_command(0x84);
 71a:	84 e8       	ldi	r24, 0x84	; 132
 71c:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(minut % 10 + '0');
 720:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <minut>
 724:	8c 02       	muls	r24, r28
 726:	c1 2d       	mov	r28, r1
 728:	11 24       	eor	r1, r1
 72a:	c5 95       	asr	r28
 72c:	c5 95       	asr	r28
 72e:	87 fd       	sbrc	r24, 7
 730:	c3 95       	inc	r28
 732:	cc 0f       	add	r28, r28
 734:	9c 2f       	mov	r25, r28
 736:	99 0f       	add	r25, r25
 738:	99 0f       	add	r25, r25
 73a:	c9 0f       	add	r28, r25
 73c:	8c 1b       	sub	r24, r28
 73e:	80 5d       	subi	r24, 0xD0	; 208
 740:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
			lst_minut = minut;
 744:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <minut>
 748:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <lst_minut>
		}
		if(lst_hour != hour){
 74c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <lst_hour>
 750:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <hour>
 754:	98 17       	cp	r25, r24
 756:	49 f1       	breq	.+82     	; 0x7aa <main+0x170>
			LCD_write_command(0x80);
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(hour / 10 + '0');
 75e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <hour>
 762:	c7 e6       	ldi	r28, 0x67	; 103
 764:	9c 02       	muls	r25, r28
 766:	81 2d       	mov	r24, r1
 768:	11 24       	eor	r1, r1
 76a:	85 95       	asr	r24
 76c:	85 95       	asr	r24
 76e:	97 fd       	sbrc	r25, 7
 770:	83 95       	inc	r24
 772:	80 5d       	subi	r24, 0xD0	; 208
 774:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
			LCD_write_command(0x81);
 778:	81 e8       	ldi	r24, 0x81	; 129
 77a:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(hour % 10 + '0');
 77e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <hour>
 782:	8c 02       	muls	r24, r28
 784:	c1 2d       	mov	r28, r1
 786:	11 24       	eor	r1, r1
 788:	c5 95       	asr	r28
 78a:	c5 95       	asr	r28
 78c:	87 fd       	sbrc	r24, 7
 78e:	c3 95       	inc	r28
 790:	cc 0f       	add	r28, r28
 792:	9c 2f       	mov	r25, r28
 794:	99 0f       	add	r25, r25
 796:	99 0f       	add	r25, r25
 798:	c9 0f       	add	r28, r25
 79a:	8c 1b       	sub	r24, r28
 79c:	80 5d       	subi	r24, 0xD0	; 208
 79e:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
			lst_hour = hour;
 7a2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <hour>
 7a6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lst_hour>
		}
		if(clock_on == 0){
 7aa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <clock_on>
 7ae:	81 11       	cpse	r24, r1
 7b0:	61 cf       	rjmp	.-318    	; 0x674 <main+0x3a>
 			LCD_write_command(0xc0);
 7b2:	80 ec       	ldi	r24, 0xC0	; 192
 7b4:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
 			LCD_write_string("OFF");
 7b8:	8e e6       	ldi	r24, 0x6E	; 110
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_write_string>
			 
 			clock_control();
 7c0:	0e 94 43 02 	call	0x486	; 0x486 <clock_control>
			clock_on = 1;
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <clock_on>
			LCD_write_command(0xc2);
 7ca:	82 ec       	ldi	r24, 0xC2	; 194
 7cc:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_char(' ');
 7d0:	80 e2       	ldi	r24, 0x20	; 32
 7d2:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_write_char>
			LCD_write_command(0xc0);
 7d6:	80 ec       	ldi	r24, 0xC0	; 192
 7d8:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_write_command>
			LCD_write_string("ON");
 7dc:	82 e7       	ldi	r24, 0x72	; 114
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_write_string>
 7e4:	47 cf       	rjmp	.-370    	; 0x674 <main+0x3a>

000007e6 <seven_seg_init>:
#include "seven_Seg_cfg.h"
uint8_t ss_data [] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x7,0x7f,0x6f};
	                           
	                  
void seven_seg_init(void){
	SEVEN_SEG_INIT_PORTS();
 7e6:	87 b3       	in	r24, 0x17	; 23
 7e8:	8f 67       	ori	r24, 0x7F	; 127
 7ea:	87 bb       	out	0x17, r24	; 23
 7ec:	8f e7       	ldi	r24, 0x7F	; 127
 7ee:	88 bb       	out	0x18, r24	; 24
 7f0:	8a b3       	in	r24, 0x1a	; 26
 7f2:	81 60       	ori	r24, 0x01	; 1
 7f4:	8a bb       	out	0x1a, r24	; 26
 7f6:	8a b3       	in	r24, 0x1a	; 26
 7f8:	82 60       	ori	r24, 0x02	; 2
 7fa:	8a bb       	out	0x1a, r24	; 26
 7fc:	8a b3       	in	r24, 0x1a	; 26
 7fe:	84 60       	ori	r24, 0x04	; 4
 800:	8a bb       	out	0x1a, r24	; 26
 802:	8a b3       	in	r24, 0x1a	; 26
 804:	88 60       	ori	r24, 0x08	; 8
 806:	8a bb       	out	0x1a, r24	; 26
 808:	8a b3       	in	r24, 0x1a	; 26
 80a:	80 61       	ori	r24, 0x10	; 16
 80c:	8a bb       	out	0x1a, r24	; 26
 80e:	8a b3       	in	r24, 0x1a	; 26
 810:	80 62       	ori	r24, 0x20	; 32
 812:	8a bb       	out	0x1a, r24	; 26
	uint8_t i = 0;
	/* convert array element from cathode to anode*/
#ifdef SS_ANODE
	for(i = 0; i < 10; i++){
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	09 c0       	rjmp	.+18     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		ss_data[i] ^= 0b01111111;  
 818:	e8 2f       	mov	r30, r24
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	ec 59       	subi	r30, 0x9C	; 156
 81e:	ff 4f       	sbci	r31, 0xFF	; 255
 820:	20 81       	ld	r18, Z
 822:	9f e7       	ldi	r25, 0x7F	; 127
 824:	92 27       	eor	r25, r18
 826:	90 83       	st	Z, r25
void seven_seg_init(void){
	SEVEN_SEG_INIT_PORTS();
	uint8_t i = 0;
	/* convert array element from cathode to anode*/
#ifdef SS_ANODE
	for(i = 0; i < 10; i++){
 828:	8f 5f       	subi	r24, 0xFF	; 255
 82a:	8a 30       	cpi	r24, 0x0A	; 10
 82c:	a8 f3       	brcs	.-22     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		ss_data[i] ^= 0b01111111;  
	}	
#endif
}
 82e:	08 95       	ret

00000830 <seven_seg_write>:
void seven_seg_write(uint8_t num, uint8_t ss_num){ 
	EN1_DIS();EN2_DIS();EN3_DIS();EN4_DIS();EN5_DIS();EN6_DIS();
 830:	9b b3       	in	r25, 0x1b	; 27
 832:	9e 7f       	andi	r25, 0xFE	; 254
 834:	9b bb       	out	0x1b, r25	; 27
 836:	9b b3       	in	r25, 0x1b	; 27
 838:	9d 7f       	andi	r25, 0xFD	; 253
 83a:	9b bb       	out	0x1b, r25	; 27
 83c:	9b b3       	in	r25, 0x1b	; 27
 83e:	9b 7f       	andi	r25, 0xFB	; 251
 840:	9b bb       	out	0x1b, r25	; 27
 842:	9b b3       	in	r25, 0x1b	; 27
 844:	97 7f       	andi	r25, 0xF7	; 247
 846:	9b bb       	out	0x1b, r25	; 27
 848:	9b b3       	in	r25, 0x1b	; 27
 84a:	9f 7e       	andi	r25, 0xEF	; 239
 84c:	9b bb       	out	0x1b, r25	; 27
 84e:	9b b3       	in	r25, 0x1b	; 27
 850:	9f 7d       	andi	r25, 0xDF	; 223
 852:	9b bb       	out	0x1b, r25	; 27
	switch(ss_num){
 854:	63 30       	cpi	r22, 0x03	; 3
 856:	a1 f0       	breq	.+40     	; 0x880 <__stack+0x21>
 858:	28 f4       	brcc	.+10     	; 0x864 <__stack+0x5>
 85a:	61 30       	cpi	r22, 0x01	; 1
 85c:	49 f0       	breq	.+18     	; 0x870 <__stack+0x11>
 85e:	62 30       	cpi	r22, 0x02	; 2
 860:	59 f0       	breq	.+22     	; 0x878 <__stack+0x19>
 862:	1d c0       	rjmp	.+58     	; 0x89e <__stack+0x3f>
 864:	65 30       	cpi	r22, 0x05	; 5
 866:	a1 f0       	breq	.+40     	; 0x890 <__stack+0x31>
 868:	78 f0       	brcs	.+30     	; 0x888 <__stack+0x29>
 86a:	66 30       	cpi	r22, 0x06	; 6
 86c:	a9 f0       	breq	.+42     	; 0x898 <__stack+0x39>
 86e:	17 c0       	rjmp	.+46     	; 0x89e <__stack+0x3f>
		case 1: EN1_EN(); break;
 870:	9b b3       	in	r25, 0x1b	; 27
 872:	91 60       	ori	r25, 0x01	; 1
 874:	9b bb       	out	0x1b, r25	; 27
 876:	13 c0       	rjmp	.+38     	; 0x89e <__stack+0x3f>
		case 2: EN2_EN(); break;
 878:	9b b3       	in	r25, 0x1b	; 27
 87a:	92 60       	ori	r25, 0x02	; 2
 87c:	9b bb       	out	0x1b, r25	; 27
 87e:	0f c0       	rjmp	.+30     	; 0x89e <__stack+0x3f>
		case 3: EN3_EN(); break;
 880:	9b b3       	in	r25, 0x1b	; 27
 882:	94 60       	ori	r25, 0x04	; 4
 884:	9b bb       	out	0x1b, r25	; 27
 886:	0b c0       	rjmp	.+22     	; 0x89e <__stack+0x3f>
		case 4: EN4_EN(); break;
 888:	9b b3       	in	r25, 0x1b	; 27
 88a:	98 60       	ori	r25, 0x08	; 8
 88c:	9b bb       	out	0x1b, r25	; 27
 88e:	07 c0       	rjmp	.+14     	; 0x89e <__stack+0x3f>
		case 5: EN5_EN(); break;
 890:	9b b3       	in	r25, 0x1b	; 27
 892:	90 61       	ori	r25, 0x10	; 16
 894:	9b bb       	out	0x1b, r25	; 27
 896:	03 c0       	rjmp	.+6      	; 0x89e <__stack+0x3f>
		case 6: EN6_EN(); break;
 898:	9b b3       	in	r25, 0x1b	; 27
 89a:	90 62       	ori	r25, 0x20	; 32
 89c:	9b bb       	out	0x1b, r25	; 27
	}
	SS_PORT &= 0b10000000;
 89e:	98 b3       	in	r25, 0x18	; 24
 8a0:	90 78       	andi	r25, 0x80	; 128
 8a2:	98 bb       	out	0x18, r25	; 24
	SS_PORT |= ss_data[num];
 8a4:	98 b3       	in	r25, 0x18	; 24
 8a6:	e8 2f       	mov	r30, r24
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	ec 59       	subi	r30, 0x9C	; 156
 8ac:	ff 4f       	sbci	r31, 0xFF	; 255
 8ae:	80 81       	ld	r24, Z
 8b0:	89 2b       	or	r24, r25
 8b2:	88 bb       	out	0x18, r24	; 24
 8b4:	08 95       	ret

000008b6 <Timer0_normal_init>:
 */ 

#include "Timer0.h"

void Timer0_normal_init(void){
	TCCR0 = (1 << FOC0) | (1 << CS00) | (1 << CS01) ;// 64 prescaler 
 8b6:	83 e8       	ldi	r24, 0x83	; 131
 8b8:	83 bf       	out	0x33, r24	; 51
	SETBIT(TIMSK, TOIE0);
 8ba:	89 b7       	in	r24, 0x39	; 57
 8bc:	81 60       	ori	r24, 0x01	; 1
 8be:	89 bf       	out	0x39, r24	; 57
	SETBIT(SREG, 7);  
 8c0:	8f b7       	in	r24, 0x3f	; 63
 8c2:	80 68       	ori	r24, 0x80	; 128
 8c4:	8f bf       	out	0x3f, r24	; 63
 8c6:	08 95       	ret

000008c8 <_exit>:
 8c8:	f8 94       	cli

000008ca <__stop_program>:
 8ca:	ff cf       	rjmp	.-2      	; 0x8ca <__stop_program>
